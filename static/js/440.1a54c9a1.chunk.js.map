{"version":3,"file":"static/js/440.1a54c9a1.chunk.js","mappings":"yOAmBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,EClCD,EAA4D,4B,6BCItDQ,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IAGJC,EAAY,CAChBC,OAAQd,IACRe,SAAUf,KAGJc,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,SAsDhB,EApDoB,WAClB,OAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eACQC,GAASC,EAAAA,EAAAA,MAATD,KAEFE,EAAY,mCAAG,WAAOC,EAAP,6EAAiBC,EAAjB,EAAiBA,WAChCJ,EAAKK,MAAK,SAAAC,GAAC,OAAIA,EAAEb,OAASU,EAAOV,IAAtB,IADI,uBAEjBc,MAAM,wDAFW,mDAMXR,GAAW,UAAKI,IANL,uDAQjBK,QAAQC,IAAR,MARiB,QAUnBL,IAVmB,yDAAH,wDAalB,OACE,SAAC,KAAD,CAAQZ,cAAeA,EAAekB,SAAUR,EAAhD,UACE,UAAC,KAAD,YACE,mBAAOS,QAASf,EAAhB,kBAEE,SAAC,KAAD,CACEZ,GAAIY,EACJgB,KAAK,OACLnB,KAAK,OACLoB,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,QAIZ,mBAAOJ,QAASd,EAAhB,oBAEE,SAAC,KAAD,CACEb,GAAIa,EACJe,KAAK,MACLnB,KAAK,SACLoB,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,QAIZ,mBAAQH,KAAK,SAASI,UAAWC,EAAjC,6BAMP,C","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { useAddContactMutation, useGetAllContactsQuery } from 'redux/operation';\nimport { Field, Formik, Form } from 'formik';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst LABEL_IDS = {\n  nameId: nanoid(),\n  numberId: nanoid(),\n};\n\nconst { nameId, numberId } = LABEL_IDS;\n\nconst ContactForm = () => {\n  const [addConatct] = useAddContactMutation();\n  const { data } = useGetAllContactsQuery();\n\n  const onFormSubmit = async (values, { resetForm }) => {\n    if (data.some(e => e.name === values.name)) {\n      alert('this contact is allready exist, please add a new one');\n      return;\n    }\n    try {\n      await addConatct({ ...values });\n    } catch (error) {\n      console.log(error);\n    }\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={onFormSubmit}>\n      <Form>\n        <label htmlFor={nameId}>\n          Name\n          <Field\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          ></Field>\n        </label>\n\n        <label htmlFor={numberId}>\n          Number\n          <Field\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          ></Field>\n        </label>\n\n        <button type=\"submit\" className={css.button}>\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","initialValues","name","number","LABEL_IDS","nameId","numberId","useAddContactMutation","addConatct","data","useGetAllContactsQuery","onFormSubmit","values","resetForm","some","e","alert","console","log","onSubmit","htmlFor","type","pattern","title","required","className","css"],"sourceRoot":""}